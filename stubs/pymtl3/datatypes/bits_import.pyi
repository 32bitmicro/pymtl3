from pymtl3.dsl.Connectable import DataType, ExprType
from typing import Any, Union, TypeVar, Generic

BitsTypeVar = TypeVar('BitsTypeVar')
NumericalValueTypeVar = TypeVar('NumericalValueTypeVar')

NumericalValueType = Union[ int, ExprType[NumericalValueTypeVar] ]

class Bits( Generic[BitsTypeVar] ):
  def __init__( self, value: NumericalValueType[BitsTypeVar] ) -> None: ...

  def __add__( self, other: DataType[Bits[BitsTypeVar]] ) -> ExprType[Bits[BitsTypeVar]]: ...
  def __sub__( self, other: DataType[Bits[BitsTypeVar]] ) -> ExprType[Bits[BitsTypeVar]]: ...
  def __and__( self, other: DataType[Bits[BitsTypeVar]] ) -> ExprType[Bits[BitsTypeVar]]: ...
  def __or__( self, other: DataType[Bits[BitsTypeVar]] ) -> ExprType[Bits[BitsTypeVar]]: ...
  def __xor__( self, other: DataType[Bits[BitsTypeVar]] ) -> ExprType[Bits[BitsTypeVar]]: ...

  def __radd__( self, other: DataType[Bits[BitsTypeVar]] ) -> ExprType[Bits[BitsTypeVar]]: ...
  def __rsub__( self, other: DataType[Bits[BitsTypeVar]] ) -> ExprType[Bits[BitsTypeVar]]: ...
  def __rand__( self, other: DataType[Bits[BitsTypeVar]] ) -> ExprType[Bits[BitsTypeVar]]: ...
  def __ror__( self, other: DataType[Bits[BitsTypeVar]] ) -> ExprType[Bits[BitsTypeVar]]: ...
  def __rxor__( self, other: DataType[Bits[BitsTypeVar]] ) -> ExprType[Bits[BitsTypeVar]]: ...

  def __lshift__( self, other: Any ) -> ExprType[Bits[BitsTypeVar]]: ...
  def __rshift__( self, other: Any ) -> ExprType[Bits[BitsTypeVar]]: ...
  def __eq__( self, other: Any ) -> ExprType[Bits[BitsTypeVar]]: ... # type: ignore
  def __ne__( self, other: Any ) -> ExprType[Bits[BitsTypeVar]]: ... # type: ignore
  def __lt__( self, other: Any ) -> ExprType[Bits[BitsTypeVar]]: ...
  def __le__( self, other: Any ) -> ExprType[Bits[BitsTypeVar]]: ...
  def __gt__( self, other: Any ) -> ExprType[Bits[BitsTypeVar]]: ...
  def __ge__( self, other: Any ) -> ExprType[Bits[BitsTypeVar]]: ...

  def __getitem__( self, index: NumericalValueType ) -> Bits[Bits1]: ...

class _Bits( type ): ...

class _Bits1( metaclass = _Bits ): ...
Bits1 = Bits[_Bits1]
b1 = Bits1

class _Bits32( metaclass = _Bits ): ...
Bits32 = Bits[_Bits32]
b32 = Bits32
