from pymtl3.datatypes.bits_import import Bits, Bits1, NumericalValueType
from typing import Sequence, Generic, TypeVar, Any, Union, Optional

T = TypeVar('T')

DataType = Union[ Wire[T], InPort[T], OutPort[T], T, ExprType[T] ]
Signal = Union[ Wire[T], InPort[T], OutPort[T] ]
ConnectableType = Union[ Signal[T], Bits[T] ]

class ExprType( Wire[T], OutPort[T], Generic[T] ):
  def __add__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __and__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __or__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __xor__( s, other: DataType[T] ) -> ExprType[T]: ...

  def __radd__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __rand__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __ror__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __rxor__( s, other: DataType[T] ) -> ExprType[T]: ...

  def __getitem__( s, index: NumericalValueType ) -> ExprType[Bits[Bits1]]: ...

class Wire( Generic[T] ):
  def __init__( s, Type: Optional[Bits] = ... ) -> None: ...

  def __add__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __and__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __or__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __xor__( s, other: DataType[T] ) -> ExprType[T]: ...

  def __radd__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __rand__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __ror__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __rxor__( s, other: DataType[T] ) -> ExprType[T]: ...

  def __getitem__( s, index: NumericalValueType ) -> Wire[Bits[Bits1]]: ...

class InPort( ExprType[T], Generic[T] ):
  def __init__( s, Type: Optional[Bits] = ... ) -> None: ...

  def __add__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __and__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __or__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __xor__( s, other: DataType[T] ) -> ExprType[T]: ...

  def __radd__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __rand__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __ror__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __rxor__( s, other: DataType[T] ) -> ExprType[T]: ...

  def __getitem__( s, index: NumericalValueType ) -> InPort[Bits[Bits1]]: ...

class OutPort( Generic[T] ):
  def __init__( s, Type: Optional[Bits] = ... ) -> None: ...

  def __add__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __and__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __or__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __xor__( s, other: DataType[T] ) -> ExprType[T]: ...

  def __radd__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __rand__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __ror__( s, other: DataType[T] ) -> ExprType[T]: ...
  def __rxor__( s, other: DataType[T] ) -> ExprType[T]: ...

  def __getitem__( s, index: NumericalValueType ) -> OutPort[Bits[Bits1]]: ...
