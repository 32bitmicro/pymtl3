`define HOLD_TIME 1
`define INTRA_CYCLE_TIME 2
`define SETUP_TIME 1
`define CYCLE_TIME (`HOLD_TIME+`INTRA_CYCLE_TIME+`SETUP_TIME)

`timescale 1ns/1ns

`define T({args_strs}) \
        t({args_strs},`__LINE__)

`define CHECK(lineno, out, ref, name) \
  if (out != ref) begin \
    $display("In cycle %0d, signal %s has value 0x%x, expects 0x%x", lineno, name, out, ref); \
  end
  //   $finish; \
  // end else \
  //   $display("Signal %s in cycle %0d passed",name, lineno);


module {harness_name};
  // convention
  logic clk;
  logic reset;

  {signal_decls};

  task t(
    {task_signal_decls},
    integer lineno
  );
  begin
    {task_assign_strs};
    #`INTRA_CYCLE_TIME;
    {task_check_strs};
    #(`SETUP_TIME+`HOLD_TIME);
  end
  endtask

  // use 25% clock cycle, so #1 for setup #2 for sim #1 for hold
  always #(`CYCLE_TIME/2) clk = ~clk;

  {dut_name} DUT
  (
    {dut_clk_decl},
    {dut_reset_decl},
    {dut_signal_decls}
  );

  initial begin
    reset = 1'b0; // TODO reset active low/high
    #`HOLD_TIME;
    reset = 1'b1;
    #`CYCLE_TIME;
    #`CYCLE_TIME;
    // 2 cycles plus hold
    reset = 1'b0;

    `include "{cases_file_name}"

    $finish;
  end
endmodule
